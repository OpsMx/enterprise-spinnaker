apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "spinnaker.fullname" . }}-halyard-init-script
  labels:
{{ include "spinnaker.standard-labels" . | indent 4 }}
data:
  init.sh: |
    {{- if not .Values.gitopsHalyard.enabled }}
    #!/bin/bash
    set -x
    # Override Halyard daemon's listen address
    cp /opt/halyard/config/* /tmp/config
    printf 'server.address: 0.0.0.0\n' > /tmp/config/halyard-local.yml

    # Use Redis deployed via the dependent Helm chart
    rm -rf /tmp/spinnaker/.hal/default/service-settings
    mkdir -p /tmp/spinnaker/.hal/default/service-settings
    cp /tmp/service-settings/* /tmp/spinnaker/.hal/default/service-settings/

    rm -rf /tmp/spinnaker/.hal/default/profiles
    mkdir -p /tmp/spinnaker/.hal/default/profiles
    cp /tmp/additionalProfileConfigMaps/* /tmp/spinnaker/.hal/default/profiles/

    rm -rf /tmp/spinnaker/.hal/.boms

    {{- if .Values.halyard.bom }}
    mkdir -p /tmp/spinnaker/.hal/.boms/bom
    cp /tmp/halyard-bom/* /tmp/spinnaker/.hal/.boms/bom
    {{- end }}

    {{- if .Values.halyard.serviceConfigs }}
    for filename in /tmp/service-configs/*; do
      basename=$(basename -- "$filename")
      fname="${basename#*_}"
      servicename="${basename%%_*}"

      mkdir -p "/tmp/spinnaker/.hal/.boms/$servicename"
      cp "$filename" "/tmp/spinnaker/.hal/.boms/$servicename/$fname"
    done
    {{- end }}

    {{- if hasKey .Values.halyard "additionalInitScript" }}
    # additionalInitScript
    {{ tpl .Values.halyard.additionalInitScript $ | indent 4 }}
    {{- end }}
    {{- end }}

    {{- if and (.Values.gitopsHalyard.enabled) (.Values.global.gitea.enabled) }}

    echo \"Checking for Gitea services\"
    wait_period=0
    while true
    do
    kubectl get po -n {{ .Release.Namespace }} -o jsonpath='{range .items[*]}{..metadata.name}{"\t"}{..containerStatuses..ready}{"\n"}{end}' > /tmp/inst.status
    GITEA=$(grep gitea-0 /tmp/inst.status |grep -v deck | awk '{print $2}')

    wait_period=$(($wait_period+10))
    if [ "$GITEA" == "true" ];
    then
        echo \"Gitea Pod is ready\"
        break
    else
        if [ $wait_period -gt 1800 ];
        then
            echo \"Script is timed out as the Gitea is not ready in 30 min.......\"
            break
        else
            echo \"Waiting for Gitea to be ready\"
            sleep 1m
        fi
    fi
    done
    rm -rf /tmp/spinnaker/repo.json
    gitea_user=`echo $GITEA_USER | sed 's/ *$//g'`
    gitea_pass=`echo $GITEA_PASS | sed 's/ *$//g'`
    basic_auth=$(echo -n $gitea_user:$gitea_pass |base64)
    DYNAMIC_ACCOUNTS_REPO=http://{{ .Release.Name }}-gitea-http.$SPINNAKER_NAMESPACE:3000/$gitea_user/gitea-standard-repo.git
    GIT_USER=$gitea_user
    GIT_TOKEN=$gitea_pass

    echo "Checking if the local gitea repo exists....." 
    curl -k -X GET "http://{{ .Release.Name }}-gitea-http.$SPINNAKER_NAMESPACE:3000/api/v1/users/$gitea_user/repos" >/tmp/spinnaker/repo.json
    checkrepo=$(cat /tmp/spinnaker/repo.json | jq '.[] | select(.name=="gitea-standard-repo")')

        if [ -z "$checkrepo" ]
        then
                echo "Creating a New Local Gitea Repo gitea-standard-repo......."
                curl -k -X POST "http://{{ .Release.Name }}-gitea-http.$SPINNAKER_NAMESPACE:3000/api/v1/user/repos" -H "content-type: application/json" -H "Authorization: Basic $basic_auth" --data '{"name":"'gitea-standard-repo'"}'
                git clone https://github.com/OpsMx/standard-gitops-repo.git -b {{ .Values.global.gitea.standardrepoBranch }} /tmp/spinnaker/test/standard-gitops-repo/
                git clone http://$gitea_user:$gitea_pass@{{ .Release.Name }}-gitea-http.$SPINNAKER_NAMESPACE:3000/$gitea_user/gitea-standard-repo.git /tmp/spinnaker/test/gitea-standard-repo/
                cp -pr /tmp/spinnaker/test/standard-gitops-repo/* /tmp/spinnaker/test/gitea-standard-repo/
                cd /tmp/spinnaker/test/gitea-standard-repo/
                git status
                git add .
                git config user.email {{ .Values.global.gitea.admin.email }}
                git config user.name $gitea_user
                git commit -m "cloned standard-gitops-repo content"
                git push
                cd
                rm -rf /tmp/spinnaker/test/gitea-standard-repo
                rm -rf /tmp/spinnaker/test/standard-gitops-repo
                rm -rf /tmp/spinnaker/test
                git clone http://$gitea_user:$gitea_pass@{{ .Release.Name }}-gitea-http.$SPINNAKER_NAMESPACE:3000/$gitea_user/gitea-standard-repo.git /tmp/spinnaker/test/

        else
                echo "Local Repo exits...."
                rm -rf /tmp/spinnaker/test/gitea-standard-repo
                git clone http://$gitea_user:$gitea_pass@{{ .Release.Name }}-gitea-http.$SPINNAKER_NAMESPACE:3000/$gitea_user/gitea-standard-repo.git /tmp/spinnaker/test
        fi
        #override the repotye to gitea in order to support pipelin-promotion
        sed -i  s/repo_type=git/repo_type=gitea/ /tmp/spinnaker/test/pipeline-promotion/pipe-promot-config-cm.yaml
        sed -i  s/git_user=/git_user=${GIT_USER}/ /tmp/spinnaker/test/pipeline-promotion/pipe-promot-config-cm.yaml
        sed -i  s/root_folder=/root_folder=pipeline-promotion/ /tmp/spinnaker/test/pipeline-promotion/pipe-promot-config-cm.yaml
    {{- end }}

    {{- if .Values.gitopsHalyard.enabled }}
    {{- if or (eq .Values.gitopsHalyard.repo.type "git") (eq .Values.gitopsHalyard.repo.type "stash") }}
    #!/bin/bash -x
    rm -rf /tmp/spinnaker/.hal
    {{- if not (.Values.gitopsHalyard.repo.sshkeysecret) }}
    {{- if not (.Values.global.gitea.enabled) }}
    GIT_USER=`echo $GIT_USER | sed 's/ *$//g'`
    GIT_TOKEN=`echo $GIT_TOKEN | sed 's/ *$//g'`
    git -c {{ .Values.gitopsHalyard.repo.configArgs }} clone $GIT_CLONE_PARAM -b {{ .Values.gitopsHalyard.repo.halConfigBranch}} /tmp/spinnaker/test 2>/tmp/tmp.log
    if [[ $? != 0 ]]; then
       echo "ERROR: Failed while trying to execute:"
       echo "git -c http.sslVerify=false clone $GIT_CLONE_PARAM -b {{ .Values.gitopsHalyard.repo.halConfigBranch}} /tmp/spinnaker/test" | sed s/$GIT_TOKEN/\<TOKEN_REDACTED\>/g
       sed s/$GIT_TOKEN/\<TOKEN_REDACTED\>/g /tmp/tmp.log
       echo "####"
       echo "Correct baseUrlHostName, organization, username, token and repository in values.yaml and re-execute 'helm upgrade --install ....' command"
       echo "   It is possible that you need to use repoType as stash instead of git. Please check the documentation."
       echo "To expedite the restart, wait for 60 seconds and delete the spinnaker-halyard-0 pod from another window"
       exit 4
    fi
    {{- end }}
    {{- end }}


    cp -r /tmp/spinnaker/test/{{ .Values.gitopsHalyard.repo.halConfigPath }} /tmp/spinnaker/.hal
    if [ -d "/tmp/spinnaker/test/pipeline-promotion/" ]
    then
       cp -r /tmp/spinnaker/test/pipeline-promotion /tmp/spinnaker/pipeline-promotion
    fi
    if [ -d "/tmp/spinnaker/test/clusterconfig/" ]
    then
       cp -r /tmp/spinnaker/test/clusterconfig /tmp/spinnaker/clusterconfig
    fi
    rm -rf /tmp/spinnaker/test
    DYNAMIC_ACCOUNTS_REPO=`echo $DYNAMIC_ACCOUNTS_REPO | sed 's/ *$//g'`
    sed -i  s/SPINNAKER_NAMESPACE/${SPINNAKER_NAMESPACE}/ /tmp/spinnaker/.hal/config
    sed -i  s/RELEASE_NAME/{{ .Release.Name }}/g /tmp/spinnaker/.hal/config
    {{- if .Values.gitopsHalyard.environment }}
    sed -i  s/ENVIRONMENT/{{ .Values.gitopsHalyard.environment }}/g /tmp/spinnaker/.hal/config
    {{- end }}
    {{- if .Values.gitopsHalyard.repo.sshkeysecret }}
    mv /tmp/spinnaker/.hal/default/profiles/spinnakerconfig.yml.ssh /tmp/spinnaker/.hal/default/profiles/spinnakerconfig.yml
    cat /etc/git-secret/ssh | sed 's/^/                       /' > /tmp/spinnaker/_temp
    cd /tmp/spinnaker/
    sed -i.bak '/|/r _temp' /tmp/spinnaker/.hal/default/profiles/spinnakerconfig.yml
    DYNAMIC_ACCOUNTS_REPO=git@{{ .Values.gitopsHalyard.repo.baseUrlHostName }}:{{ .Values.gitopsHalyard.repo.organization }}/{{ .Values.gitopsHalyard.repo.dynamicAccRepository }}.git
    {{- else }}
    sed -i  s/GIT_USER/${GIT_USER}/g /tmp/spinnaker/.hal/default/profiles/spinnakerconfig.yml
    sed -i  s/GIT_TOKEN/${GIT_TOKEN}/g /tmp/spinnaker/.hal/default/profiles/spinnakerconfig.yml
    {{- end }}
    sed -i  's|DYNAMIC_ACCOUNTS_REPO|'"${DYNAMIC_ACCOUNTS_REPO}"'|' /tmp/spinnaker/.hal/default/profiles/spinnakerconfig.yml
    sed -i  s%DYN_ACCNT_CONFG_PATH%{{ .Values.gitopsHalyard.repo.dynAccntConfigPath }}%g /tmp/spinnaker/.hal/default/profiles/spinnakerconfig.yml
    sed -i  s/RELEASE_NAME/{{ .Release.Name }}/g /tmp/spinnaker/.hal/default/profiles/rosco-local.yml
    sed -i  s/RELEASE_NAME/{{ .Release.Name }}/g /tmp/spinnaker/.hal/default/service-settings/redis.yml
    {{- if not .Values.global.ldap.enabled }}
    yq e '.deploymentConfigurations.[].security.authn.ldap.enabled = "false"' /tmp/spinnaker/.hal/config > /tmp/spinnaker/.hal/config1
    mv /tmp/spinnaker/.hal/config1 /tmp/spinnaker/.hal/config
    {{- end }}
    {{- if .Values.global.commonGate.spinnakerRBAC }}
    yq e '.deploymentConfigurations.[].security.authz.enabled = "true"' /tmp/spinnaker/.hal/config > /tmp/spinnaker/.hal/config1
    mv /tmp/spinnaker/.hal/config1 /tmp/spinnaker/.hal/config
    yq e '.tasks.useManagedServiceAccounts = "true"' /tmp/spinnaker/.hal/default/profiles/orca-local.yml > /tmp/spinnaker/.hal/default/profiles/orca-local1.yml
    mv /tmp/spinnaker/.hal/default/profiles/orca-local1.yml /tmp/spinnaker/.hal/default/profiles/orca-local.yml
    sed -i s/false/true/ /tmp/spinnaker/.hal/default/profiles/settings-local.js
    yq e '.migrations.migrateToManagedServiceAccounts = "true"' /tmp/spinnaker/.hal/default/profiles/front50-local.yml > /tmp/spinnaker/.hal/default/profiles/front50-local1.yml
    mv /tmp/spinnaker/.hal/default/profiles/front50-local1.yml /tmp/spinnaker/.hal/default/profiles/front50-local.yml
    {{- else }}
    yq e '.deploymentConfigurations.[].security.authz.enabled = "false"' /tmp/spinnaker/.hal/config > /tmp/spinnaker/.hal/config1
    mv /tmp/spinnaker/.hal/config1 /tmp/spinnaker/.hal/config
    {{- end }}
    if [ -f /tmp/spinnaker/.hal/default/profiles/fiat-local.yml ]; then
    sed -i  s/RELEASE_NAME/{{ .Release.Name }}/g /tmp/spinnaker/.hal/default/profiles/fiat-local.yml
    fi
    sed -i  s/SPINNAKER_NAMESPACE/${SPINNAKER_NAMESPACE}/ /tmp/spinnaker/.hal/default/profiles/orca-local.yml
    printf 'server.address: 0.0.0.0\n' > /tmp/config/halyard-local.yml
    if [ -f /tmp/spinnaker/.hal/halyard.yaml ]; then
    cp /tmp/spinnaker/.hal/halyard.yaml /tmp/config
    fi
    {{- if and (.Values.global.auth.saml) (.Values.global.commonGate.enabled) }}
    kubectl get secret oes-gate-config -o jsonpath='{.data.*}' -n ${SPINNAKER_NAMESPACE} | base64 -d > /tmp/gate1.yml
    oesuihost=$(yq e '.saml.redirectHostname' /tmp/gate1.yml)
    oesuiurl={{ .Values.global.oesUI.protocol }}://$oesuihost
    echo $oesuiurl
    #yq e '.services.gate.baseUrl = "'$oesuiurl'"' /tmp/gate1.yml > /tmp/gate2.yml
    #yq e '.services.gate.baseUrl = {{ .Values.global.oesUI.protocol }}:"'$oesuiurl'"' /tmp/gate1.yml > /tmp/gate2.yml
    yq e '.services.gate.baseUrl = "'$oesuiurl'"' /tmp/gate1.yml > /tmp/gate2.yml
    mv /tmp/gate2.yml /tmp/gate.yml
    yq e '.deploymentConfigurations.[].security.apiSecurity.overrideBaseUrl = "'$oesuiurl'"' /tmp/spinnaker/.hal/config > /tmp/spinnaker/.hal/config1
    mv /tmp/spinnaker/.hal/config1 /tmp/spinnaker/.hal/config
    yq e -j '.' /tmp/gate.yml  > /tmp/saml.yml
    jq '.saml |= . + {"metadataLocal": "encryptedFile:oesmetadataxml:oesmetadata.xml"} + {"serviceAddress": "'$oesuiurl'"} + {"keyStore": "encryptedFile:oessamljks:oessaml.jks"} + {"keyStorePassword":"encrypted:samljks-password:password"}' /tmp/saml.yml > /tmp/finalsaml.yml
    #yq eval -P /tmp/saml1.yml > /tmp/saml2.yml
    #yq e '.saml.serviceAddress = {{ .Values.global.oesUI.protocol }}:"'$oesuiurl'"' /tmp/saml2.yml > /tmp/finalsaml.yml
    yq e -j '.saml' /tmp/finalsaml.yml > /tmp/delete.yml
    yq eval -j 'del(.enabled) | del(.userSource) | del(.jksSecretName) | del(.metadataSecretName) | del(.metadataUrl) | del(.redirectBasePath)| del(.redirectHostname) | del(.redirectProtocol) | del(.redirectBasePath)' /tmp/delete.yml > /tmp/delete1.yml
    replace=$(cat /tmp/delete1.yml)
    yq e -j '.' /tmp/spinnaker/.hal/config  > /tmp/spinnaker/.hal/config.json
    jq --argjson toolConnectorParameteres ''"$replace"'' '.deploymentConfigurations[].security.authn.saml += $toolConnectorParameteres' /tmp/spinnaker/.hal/config.json > /tmp/spinnaker/.hal/config1.json
    yq eval -P /tmp/spinnaker/.hal/config1.json > /tmp/spinnaker/.hal/finalconfig.json
    mv /tmp/spinnaker/.hal/finalconfig.json /tmp/spinnaker/.hal/config
    yq e '.deploymentConfigurations.[].security.authn.saml.enabled = "true"' /tmp/spinnaker/.hal/config > /tmp/spinnaker/.hal/config1
    mv /tmp/spinnaker/.hal/config1 /tmp/spinnaker/.hal/config
    sleep 30s
    kubectl delete secret oes-gate-config -n ${SPINNAKER_NAMESPACE}
    kubectl create secret generic oes-gate-config --from-file=/tmp/gate.yml -n ${SPINNAKER_NAMESPACE}
    kubectl delete pod -l component=gate -n ${SPINNAKER_NAMESPACE}
    {{- else }}
    yq e '.deploymentConfigurations.[].security.authn.saml.enabled = "false"' /tmp/spinnaker/.hal/config > /tmp/spinnaker/.hal/config1
    mv /tmp/spinnaker/.hal/config1 /tmp/spinnaker/.hal/config
    {{- end }}
    {{- end }}  # git or stash
    {{- end }}  # Enabled

    {{- if and (.Values.gitopsHalyard.enabled) (eq .Values.gitopsHalyard.repo.type "s3") }}
    #!/bin/bash -x
    rm -rf /tmp/spinnaker/.hal
    AWS_ACCESS_KEY_ID=$S3_ACCESSKEY AWS_SECRET_ACCESS_KEY=$S3_SECRETKEY aws s3 cp s3://$S3_BUCKET/config /tmp/spinnaker/.hal/config
    AWS_ACCESS_KEY_ID=$S3_ACCESSKEY AWS_SECRET_ACCESS_KEY=$S3_SECRETKEY aws s3 cp s3://$S3_BUCKET/default/ /tmp/spinnaker/.hal/default --recursive
    AWS_ACCESS_KEY_ID=$S3_ACCESSKEY AWS_SECRET_ACCESS_KEY=$S3_SECRETKEY aws s3 cp s3://$S3_BUCKET/halyard.yaml /tmp/spinnaker/.hal/halyard.yaml
    sed -i  s/SPINNAKER_NAMESPACE/${SPINNAKER_NAMESPACE}/ /tmp/spinnaker/.hal/config
    sed -i  s/RELEASE_NAME/{{ .Release.Name }}/g /tmp/spinnaker/.hal/config
    sed -i  s/RELEASE_NAME/{{ .Release.Name }}/g /tmp/spinnaker/.hal/default/service-settings/redis.yml
    if [ -f /tmp/spinnaker/.hal/default/profiles/fiat-local.yml ]; then
    sed -i  s/RELEASE_NAME/{{ .Release.Name }}/g /tmp/spinnaker/.hal/default/profiles/fiat-local.yml
    fi
    sed -i  s/SPINNAKER_NAMESPACE/${SPINNAKER_NAMESPACE}/ /tmp/spinnaker/.hal/default/profiles/orca-local.yml
    # Copy S3 Specific files
    cp /tmp/spinnaker/.hal/default/service-settings/clouddriver-caching.yml.s3 /tmp/spinnaker/.hal/default/service-settings/clouddriver-caching.yml
    cp /tmp/spinnaker/.hal/default/service-settings/clouddriver-ro.yml.s3 /tmp/spinnaker/.hal/default/service-settings/clouddriver-ro.yml
    cp /tmp/spinnaker/.hal/default/service-settings/clouddriver-rw.yml.s3 /tmp/spinnaker/.hal/default/service-settings/clouddriver-rw.yml
    cp /tmp/spinnaker/.hal/default/service-settings/clouddriver-ro-deck.yml.s3 /tmp/spinnaker/.hal/default/service-settings/clouddriver-ro-deck.yml
    cp /tmp/spinnaker/.hal/default/profiles/spinnakerconfig.yml.s3 /tmp/spinnaker/.hal/default/profiles/spinnakerconfig.yml
    # Edit and put secrets in there
    sed -i  s/AWS_ACCESS_KEY_ID/${S3_ACCESSKEY}/g /tmp/spinnaker/.hal/default/service-settings/clouddriver-caching.yml
    sed -i  s/AWS_ACCESS_KEY_ID/${S3_ACCESSKEY}/g /tmp/spinnaker/.hal/default/service-settings/clouddriver-ro.yml
    sed -i  s/AWS_ACCESS_KEY_ID/${S3_ACCESSKEY}/g /tmp/spinnaker/.hal/default/service-settings/clouddriver-ro-deck.yml
    sed -i  s/AWS_ACCESS_KEY_ID/${S3_ACCESSKEY}/g /tmp/spinnaker/.hal/default/service-settings/clouddriver-rw.yml
    sed -i  s%AWS_SECRET_ACCESS_KEY%${S3_SECRETKEY}%g /tmp/spinnaker/.hal/default/service-settings/clouddriver-caching.yml
    sed -i  s%AWS_SECRET_ACCESS_KEY%${S3_SECRETKEY}%g /tmp/spinnaker/.hal/default/service-settings/clouddriver-ro.yml
    sed -i  s%AWS_SECRET_ACCESS_KEY%${S3_SECRETKEY}%g /tmp/spinnaker/.hal/default/service-settings/clouddriver-ro-deck.yml
    sed -i  s%AWS_SECRET_ACCESS_KEY%${S3_SECRETKEY}%g /tmp/spinnaker/.hal/default/service-settings/clouddriver-rw.yml
    sed -i  s/AWS_S3_BUCKET/${S3_BUCKET}/g /tmp/spinnaker/.hal/default/profiles/spinnakerconfig.yml
    sed -i  s/AWS_S3_REGION/${S3_REGION}/g /tmp/spinnaker/.hal/default/profiles/spinnakerconfig.yml

    printf 'server.address: 0.0.0.0\n' > /tmp/config/halyard-local.yml
    if [ -f /tmp/spinnaker/.hal/halyard.yaml ]; then
    cp /tmp/spinnaker/.hal/halyard.yaml /tmp/config
    fi
    {{- end }}  # End of S3

    {{- if .Values.gitopsHalyard.mTLS.enabled }}
    sed -i  s/SPINNAKER_NAMESPACE/${SPINNAKER_NAMESPACE}/g /tmp/spinnaker/.hal/default/service-settings/*
    {{- end }}
    # pipeline promotion configuration setup
    #
    ls -lart /home/spinnaker/java-lib/
    if [ -d "/tmp/spinnaker/pipeline-promotion/" ]
    then
      #decrypt_key=$(kubectl get cm bootstrap -o yaml  -n ${SPINNAKER_NAMESPACE}| grep 'password:' | awk '{ print $2}')
      #decrypt_key=$(kubectl get secret bootstrap -o jsonpath='{.data.bootstrap\.yml}' -n ${SPINNAKER_NAMESPACE} | base64 -d | grep 'password:' | awk '{ print $2}')
      kubectl get secret bootstrap -o jsonpath='{.data.bootstrap\.yml}' -n ${SPINNAKER_NAMESPACE} | base64 -d > /tmp/decryptkry.txt
      decrypt_key=$(yq e '.jasypt.encryptor.password' /tmp/decryptkry.txt)
      if [[ $decrypt_key != "" ]];
      then
        for filename in /tmp/spinnaker/pipeline-promotion/*; do
          java -cp "Decryptor.jar:/home/spinnaker/java-lib/*" Decryptor $decrypt_key "$filename"
        done
      mkdir /tmp/spinnaker/pipeline-decrypted/
      mv /tmp/spinnaker/pipeline-promotion/*decrypted.yaml /tmp/spinnaker/pipeline-decrypted/
      kubectl apply -f /tmp/spinnaker/pipeline-promotion/pipe-promot-config-cm.yaml -n ${SPINNAKER_NAMESPACE}
      kubectl apply -f /tmp/spinnaker/pipeline-decrypted/ -n ${SPINNAKER_NAMESPACE}
     fi
    fi
   
    ############# Auto Configuration for Custom Stages in ORCA #############

    if [ -d "/tmp/spinnaker/clusterconfig/" ]
    then
      #decrypt_key=$(kubectl get secret bootstrap -o jsonpath='{.data.bootstrap\.yml}' -n ${SPINNAKER_NAMESPACE} | base64 -d | grep 'password:' | awk '{ print $2}')
      kubectl get secret bootstrap -o jsonpath='{.data.bootstrap\.yml}' -n ${SPINNAKER_NAMESPACE} | base64 -d > /tmp/decryptkry.txt
      decrypt_key=$(yq e '.jasypt.encryptor.password' /tmp/decryptkry.txt)
      if [[ $decrypt_key != "" ]];
      then
        for filename in /tmp/spinnaker/clusterconfig/*; do
          java -cp "Decryptor.jar:/home/spinnaker/java-lib/*" Decryptor $decrypt_key "$filename"
        done
      mkdir /tmp/spinnaker/clusterconfig-decrypted/
      mv /tmp/spinnaker/clusterconfig/*decrypted.yaml /tmp/spinnaker/clusterconfig-decrypted/
      kubectl apply -f /tmp/spinnaker/clusterconfig-decrypted/ -n ${SPINNAKER_NAMESPACE}
        if [ -r "/tmp/spinnaker/clusterconfig/servicenow-secret.yaml" ]
        then
           #### Extracting the Service NOW information from secret ####
           SERVICENOW_USER=$(kubectl get secret servicenow-secret -o jsonpath='{.data.SERVICENOW_USERNAME}' -n ${SPINNAKER_NAMESPACE} | base64 -d)
           SERVICENOW_DNS=$(kubectl get secret servicenow-secret -o jsonpath='{.data.SERVICENOW_URL}' -n ${SPINNAKER_NAMESPACE} | base64 -d)
           SERVICENOW_PASSWD=$(kubectl get secret servicenow-secret -o jsonpath='{.data.SERVICENOW_PASSWORD}' -n ${SPINNAKER_NAMESPACE} | base64 -d)
           SERVICENOW_BASE64_USR_PASSWD=$(echo -n "$SERVICENOW_USER:$SERVICENOW_PASSWD" | base64)
           sed -i s%SERVICENOW_URL%${SERVICENOW_DNS}%g /tmp/spinnaker/.hal/default/profiles/orca-local.yml
           sed -i  s/SERVICENOW_BASE64_USR_PASSWD/${SERVICENOW_BASE64_USR_PASSWD}/g /tmp/spinnaker/.hal/default/profiles/orca-local.yml
        else
           echo "Not able to find the ServiceNow secret file"
        fi
        if [ -r "/tmp/spinnaker/clusterconfig/jira-secret.yaml" ]
        then
           #### Extracting the JIRA information from secret ####
           JIRA_USER=$(kubectl get secret jira-secret -o jsonpath='{.data.JIRA_USERNAME}' -n ${SPINNAKER_NAMESPACE} | base64 -d)
           JIRA_DNS=$(kubectl get secret jira-secret -o jsonpath='{.data.JIRA_URL}' -n ${SPINNAKER_NAMESPACE} | base64 -d)
           JIRA_TOKN=$(kubectl get secret jira-secret -o jsonpath='{.data.JIRA_TOKEN}' -n ${SPINNAKER_NAMESPACE} | base64 -d)
           JIRA_BASE64_USR_PASSWD=$(echo -n "$JIRA_USER:$JIRA_TOKN" | base64)
           sed -i s%JIRA_URL%${JIRA_DNS}%g /tmp/spinnaker/.hal/default/profiles/orca-local.yml
           sed -i  s/JIRA_BASE64_USR_PASSWD/${JIRA_BASE64_USR_PASSWD}/g /tmp/spinnaker/.hal/default/profiles/orca-local.yml
        else
           echo "Not able to find the ServiceNow secret file"
        fi
     fi
    fi
