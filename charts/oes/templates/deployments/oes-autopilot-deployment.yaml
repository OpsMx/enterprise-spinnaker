{{- if or (eq .Values.installationMode "OES-AP")  (eq .Values.installationMode "EASY") -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
{{ include "isd.standard-annotations" . | indent 4 }}
  name: oes-autopilot
  labels:
    app: oes
    component: autopilot
{{ include "oes.standard-labels" . | indent 4 }}
spec:
  replicas: {{ .Values.autopilot.replicas }}
  selector:
    matchLabels:
      app: oes
      component: autopilot
  template:
    metadata:
      labels:
        app: oes
        component: autopilot
{{ include "oes.standard-labels" . | indent 8 }}
      annotations:
        configmap/checksum: {{ (.Files.Glob "config/autopilot/autopilot.properties").AsConfig | sha256sum }}
{{- if .Values.autopilot.annotations -}}
        {{ toYaml .Values.autopilot.annotations | nindent 8 }}
{{- end }}
    spec:
      volumes:
        - secret:
            items:
            - key: bootstrap.yml
              path: bootstrap.yml
            secretName: bootstrap
          name: bootstrap-config-volume
        - emptyDir: {}
          name: autopilot-config
        - configMap:
            name: oes-autopilot-config
          name: autopilot-config-volume  
        - configMap:
            defaultMode: 420
            items:
            - key: standard-error-codes.csv
              path: standard-error-codes.csv
            name: standard-error-codes-config
          name: standard-error-conf
        {{- if .Values.global.customCerts.enabled }}
        - name: cacerts
          secret:
            secretName: {{ .Values.global.customCerts.secretName }}
            items:
            - key: cacerts
              path: cacerts
        {{- end }}
      {{- if .Values.imagePullSecret}}
      imagePullSecrets:
      - name: {{ .Values.imagePullSecret}}
      {{- end }}
      {{- if and (.Values.global.openshift) (not .Values.global.securityContext) }}
      securityContext: {{ default "{}" }}
      {{- else }}
      {{- if and (.Values.global.openshift) (.Values.global.securityContext) }}
      securityContext:
{{ toYaml .Values.global.securityContext | indent 8 }}
      {{- else }}
      {{- if and (not .Values.global.openshift) (.Values.global.securityContext) }}
      securityContext:
{{ toYaml .Values.global.securityContext | indent 8 }}
      {{- end }}
      {{- end }}
      {{- end }}
      {{- if .Values.global.nodeSelector }}
      nodeSelector:
{{ toYaml .Values.global.nodeSelector | indent 8 }}
      {{- end }}
      {{- if .Values.global.affinity }}
      affinity:
{{ toYaml .Values.global.affinity | indent 8 }}
      {{- end }}
      {{- if .Values.global.tolerations }}
      tolerations:
{{ toYaml .Values.global.tolerations | indent 8 }}
      {{- end }}      
      initContainers:
      - name: db-check
        image: {{ .Values.global.customImages.registry }}/pgchecker:v1
        command:
          - sh
          - -c
          - |
            RABBITMQ_DEFAULT_PASS=`echo $RABBITMQ_DEFAULT_PASS | sed 's/ *$//g'`
        {{- if .Values.db.enabled }}
            echo 'Waiting for OES-DB to become ready...'
            until printf "." && nc -z -w 2 oes-db 5432; do
               sleep 2;
            done;
            echo 'OESDB OK âœ“'
            OPSMX_POSTGRESQL_PASS=`echo $OPSMX_POSTGRESQL_PASS | sed 's/ *$//g'`
            sed -e s/OPSMX_POSTGRESQL_PASS/${OPSMX_POSTGRESQL_PASS}/g /tmp/autopilot.properties > /tmp/config/autopilot.properties
        {{- else }}
            cp /tmp/autopilot.properties > /tmp/config/autopilot.properties
        {{- end }}
            sed -i s/RABBITMQ_DEFAULT_PASS/${RABBITMQ_DEFAULT_PASS}/g /tmp/config/autopilot.properties
            echo success
        env:
        {{- if .Values.db.enabled }}
        - name: OPSMX_POSTGRESQL_PASS
          valueFrom:
            secretKeyRef:
              key: pgpassword
              name: oes-db
         {{- end }}
        - name: RABBITMQ_DEFAULT_PASS
          valueFrom:
            secretKeyRef:
              key: rabbitmqpassword
              name: rabbitmq
        volumeMounts:
        - mountPath: /tmp
          name: autopilot-config-volume
        - mountPath: /tmp/config
          name: autopilot-config
      containers:
        - image: {{ template "autopilot.image" . }}
          imagePullPolicy: {{ .Values.autopilot.image.pullPolicy }}
          name: oes-autopilot
          env:
          {{- if .Values.extraEnvVars }}
          {{- include "tplvalues.render" (dict "value" .Values.extraEnvVars "context" $) | nindent 12 }}
          {{- end }}
          resources:
{{ toYaml .Values.autopilot.resources | indent 12 }}
          ports:
            - containerPort: 8090
              name: backend
              protocol: TCP
            - containerPort: 9090
              name: metricfetcher
              protocol: TCP
          volumeMounts:
          - mountPath: /opsmx/conf/autopilot.properties
            name: autopilot-config
            subPath: autopilot.properties
          - mountPath: /opsmx/conf/bootstrap.yml
            name: bootstrap-config-volume
            subPath: bootstrap.yml
          - mountPath: /opsmx/conf/standard-error-code.csv
            name: standard-error-conf
            subPath: standard-error-codes.csv
          {{- if .Values.global.customCerts.enabled }}
          - mountPath: /etc/pki/ca-trust/extracted/java/cacerts
            subPath: cacerts
            name: cacerts
          {{- end }}
          readinessProbe:
            tcpSocket:
              port: 8090
            initialDelaySeconds: 60
            periodSeconds: 10
          livenessProbe:
            httpGet:
              path: /mgmt/health
              port: 8090
            initialDelaySeconds: 120
            periodSeconds: 60
{{- end -}}
