{{- if or (eq .Values.installationMode "OES-AP")  (eq .Values.installationMode "EASY") -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
{{ include "isd.standard-annotations" . | indent 4 }}
  labels:
    app: oes
    component: datascience
{{ include "oes.standard-labels" . | indent 4 }}
  name: oes-datascience
spec:
  replicas: {{ .Values.datascience.replicas }}
  selector:
    matchLabels:
      app: oes
      component: datascience
  template:
    metadata:
      annotations:
        configmap/checksum: {{ (.Files.Glob "config/oes-datascience/datascience-local.yml").AsConfig | sha256sum }}
{{- if .Values.datascience.annotations -}}
        {{ toYaml .Values.datascience.annotations | nindent 8 }}
{{- end }}
      labels:
        app: oes
        component: datascience
{{ include "oes.standard-labels" . | indent 8 }}
    spec:
      {{- if (eq .Values.db.enabled true) }}
      initContainers:
      - name: db-check
        image: {{ .Values.global.customImages.registry }}/pgchecker:v1
        command:
          - sh
          - -c
          - |
            echo 'Waiting for OES-DB to become ready...'
            until printf "." && nc -z -w 2 oes-db 5432; do
               sleep 2;
            done;
            echo 'OESDB OK âœ“'
            sed -e "s@PGPASSWORD@$OPSMX_POSTGRESQL_PASS@g" /opsmx/conf/app-config.yml > /tmp/conf/app-config.yml
            sed -i "s@RABBITMQPASSWORD@$RABBITMQ_DEFAULT_PASS@g" /tmp/conf/application.yml
            echo success
        env:
        - name: OPSMX_POSTGRESQL_PASS
          valueFrom:
            secretKeyRef:
              key: pgpassword
              name: oes-db
        - name: RABBITMQ_DEFAULT_PASS
          valueFrom:
            secretKeyRef:
              key: rabbitmqpassword
              name: rabbitmq
        volumeMounts:
        - mountPath: /opsmx/conf/
          name: config-volume
        - mountPath: /tmp/conf/
          name: datascience-config-volume
      {{- end }}
      containers:
      - image: {{ template "datascience.image" . }}
        imagePullPolicy: IfNotPresent
        name: oes-datascience
        env:
       {{- if .Values.extraEnvVars }}
       {{- include "tplvalues.render" (dict "value" .Values.extraEnvVars "context" $) | nindent 8 }}
       {{- end }}
        ports:
        - containerPort: 5005
          name: backend
          protocol: TCP
        readinessProbe:
          failureThreshold: 3
          initialDelaySeconds: 60
          periodSeconds: 10
          successThreshold: 1
          tcpSocket:
            port: 5005
          timeoutSeconds: 1
        volumeMounts:
        - mountPath: /home/ubuntu/.aws/credentials
          name: datascience-config-volume
          subPath: minio-credentials
        - mountPath: /home/ubuntu/datascience/app_config.yaml
          name: datascience-config-volume
          subPath: app-config.yml
      {{- if .Values.imagePullSecret}}
      imagePullSecrets:
      - name: {{ .Values.imagePullSecret}}
      {{- end }}
      {{- if .Values.global.nodeSelector }}
      nodeSelector:
{{ toYaml .Values.global.nodeSelector | indent 8 }}
      {{- end }}
      {{- if .Values.global.affinity }}
      affinity:
{{ toYaml .Values.global.affinity | indent 8 }}
      {{- end }}
      {{- if .Values.global.tolerations }}
      tolerations:
{{ toYaml .Values.global.tolerations | indent 8 }}
      {{- end }}
      volumes:
      {{- if .Values.global.customCerts.enabled }}
      - name: cacerts
        secret:
          secretName: {{ .Values.global.customCerts.secretName }}
          items:
          - key: cacerts
            path: cacerts
      {{- end }}
      - secret:
          secretName: oes-datascience-config
        name: config-volume
{{- end -}}
