## Quay container image registry credentials to create imagePullSecret
##
imageCredentials:
  username: quayID  # Quay username
  password: quayPassword # Quay password
  email: info@opsmx.com   # email corresponding to quay registry ID
  
## Declare all the global variables under this
## Global variables can be accessed across all the charts including sub-charts
global:
  # Spinnaker Deck URL configuration; url overwhich spinnaker deck will be accessed
  spinDeck:
    host: spin.example.ops.com

  # Spinnaker Gate URL configuration; url overwhich spinnaker gate will be accessed
  spinGate:
    host: spin-gate.example.ops.com
gate:
   config:
    # to use common gate for both oes and spinnaker
     commonGate:
            enabled: false
sapor:
  config:
    encrypt:
      enabled: true
      key: <<encryption key>> # ex: Q7udUkHPuA3VnNlOtksSgQ     #encryption key needed for sapor to startup from 3.9
## OES-UI url configuration
oesUI:
  host: oes.example.ops.com

## OES-Gate url configuration
oesGate:
  host: oes-gate.example.ops.com

spinnaker:
  # Initialize gitOps style Halyard
  gitopsHalyard:
    enabled: true
    repo:
      type: stash # git, S3, stash, only git support at this point
      baseUrlHostName: example.stash.com #ex: bbdev.opsmx.com    #  https://bbdev.opsmx.com/scm/ksrin/test38.git
      organization: scm                   #  https://bbdev.opsmx.com/scm/ksrin/test38.git
      projectName: <proj_name>                  #  https://bbdev.opsmx.com/scm/ksrin/test38.git
      repository: <repo name> # repo name for GitOps Halyard (Sample Reference: https://github.com/OpsMx/sample-gitops-repo.git).
      dynamicAccRepository: <dynamic rep> # Please provide the repo name of the GitOps Dynamic Accounts Directory.Can be same as Hal repo. 
      halConfigPath: / #hal config path configuration path supports relative path from the root folder must be same as  dynAccntConfigPath
      dynAccntConfigPath: / #dymanic account configuration path supports relative path from the root folder must be same as halConfigPath
      username: <user name>               # Authenticating User-Name
      token:  <password>                  # Authenticating password
    secretName: opsmx-gitops-auth
    # Promote applications and pipelines from one environment to another or take backup
    pipelinePromotion:
      enabled: true
      type: stash  #type of the repo
      repository: <repo_name> # git repo to upload or download pipelines
      rootFolder: <path_to_save_the_files> # the path in repo to where the pipelines json to be uploaded ex: opsmx/pipelinePromotion
      baseUrl: example.stash.com # stash url without https or anything
      organization: <project_name> #project where repo is created
      username: <username> #username for authentication
      token: <token> # personal access token for authenticating
      branch: <branchname> #branch to push the changes ex: testbranch
      #merging opstions
      apiUrl: example.statsh.com/rest/api/1.0/proects #ex: bbdev.opsmx.com/rest/api/1.0/projects #api url for curl commands
      createPR: false #make it true if you want to create PR
      autoApprovePR: false # make it true if you want to auto merge
      approvingUser: <approver_username> # this user needed to approve pr
      approverToken: <approver_token>
      targetBranch: master # or the branch to whch PR needs to be raised and merged

      #for deleting pipeline in spinnaker
      deleteOnSyncSpin: false
      #not implemented
      deleteOnSyncRepo: false

  ## Auth mechanism and credentials to be used by spin-cli for creating the sample pipelines
  ## Here basic ldap auth is used by default; everything under spinCli will be pasted in ~/.spin/config
  spinCli:
    gate:
      endpoint: http://spin-gate:8084 # Should same as the spin-gate URL
    auth:
      enabled: true
      basic:
        username: admin          # Please updated as required
        password: opsmxadmin123  # Please updated as required
