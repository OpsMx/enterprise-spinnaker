#####################################################
# OpsMx Enterprise configuration
#####################################################
k8sServiceType: LoadBalancer
k8sSecret: oes-repo
installOpenLdap: true
installSpinnaker: false
###
oes:
  #labels: {}
  image:
    gate:
      repository: opsmx11/oes
      tag: gate-v0.202006091103
      pullPolicy: IfNotPresent
    server:
      repository: opsmx11/oes
      tag: server-v0.202006091402
      pullPolicy: IfNotPresent
    ui:
      repository: opsmx11/oes
      tag: ui-v0.202006091010
      pullPolicy: IfNotPresent
  config:
    db:
      dbUrl: jdbc:postgresql://db-opsmx:5432/opsmx
      username: postgres
      password: networks123
    server:
      baseUrl: http://oes-server-svc:8085
      enabled: true
    spinnaker:
      oesGateURL: http://192.168.0.171:31174/  # Value of the OES-GATE URL
      oesUIcors: ^https?://(?:localhost|oes-ui-svc|opsmx.com)(?::[1-9]\d*)?/? # Value of the OES UI URL
      spinGateURL: https://demo.opsmx.com/gate # Value of the Spinnaker-gate URL
      spinExternalGateURL: https://demo.opsmx.com/ # Value of the Spinnaker URL to access spinnaker from UI
      spinuser: ***** # Value of the Spinnaker Username (Deck)
      spinpasswd: ****** # Value of the Spinnaker Password (Deck)
      adminLoginEnabled: false
    ldap:
      enabled: true
      url: ldap://23.99.207.205:389  # Value of ldap.url
      userDnPattern: cn={0} # Value of ldap.userdn
      basedn: dc=example,dc=org # Value of ldap.base.dn
      pattern: (&(cn=USERNAME)) # Value of ldap.user.filter.pattern
        # Password for the admin user
      adminPassword: OpsMx@123
      omitClusterIP: true
###################################################
opsmxdb:
  # Change this to false if autopilot is installed along with OES
  # as autopilot can use the DB of OES
  #enabled: true
  podManagementPolicy: OrderedReady
  securityContext:
    fsGroup: 1000
  #labels: {}
  image:
    repository: opsmxdev/ubi8-autopilot-db
    tag: v1.3.0
    pullPolicy: IfNotPresent
  persistence:
    OESDBSize: 8Gi


#####################################################
# Spinnaker extra configuration
#####################################################
k8sServiceType: LoadBalancer
createIngress: false

#####################################################
# Centralized Logging Configuration
#####################################################
enableCentralLogging: false
elasticsearch:
  replicas: 1
  minimumMasterNodes: 1
  resources:
    requests:
      cpu: "100m"
      memory: "1Gi"

kibana:
  service:
    type: LoadBalancer
  resources:
    requests:
      cpu: "100m"
      memory: "250Mi"
  lifecycle:
    postStart:
      exec:
        command:
          - bash
          - -c
          - >
            until curl localhost:5601; do echo "Waiting for Kibana to be available..."; sleep 5; done;
            until curl elasticsearch-master:9200; do echo "Waiting for Elasticsearch to be available..."; sleep 5; done;
            sleep 60;
            curl https://raw.githubusercontent.com/OpsMx/enterprise-spinnaker/master/scripts/kibana/kibana_objects.ndjson > /tmp/kibana_objects.ndjson;
            curl -X POST "localhost:5601/api/saved_objects/_import?overwrite=true" -H "kbn-xsrf: true" --form file=@/tmp/kibana_objects.ndjson 2>&1 1> /tmp/postStart.out;

#####################################################
# Spinnaker instance configuration
#####################################################
spinnaker:
  halyard:
    spinnakerVersion: 1.19.5
    image:
      repository: gcr.io/spinnaker-marketplace/halyard
      tag: 1.34.0
    # Set to false to disable persistence data volume for halyard
    persistence:
      enabled: true
    # Provide a config map with Hal commands that will be run the core config (storage)
    # The config map should contain a script in the config.sh key
    additionalScripts:
      enabled: false
      configMapName: my-halyard-config
      configMapKey: config.sh
      # If you'd rather do an inline script, set create to true and put the content in the data dict like you would a configmap
      # The content will be passed through `tpl`, so value interpolation is supported.
      create: false
      data: {}
    additionalSecrets:
      create: false
      data: {}
      ## Uncomment if you want to use a pre-created secret rather than feeding data in via helm.
      # name:
    additionalConfigMaps:
      create: false
      data: {}
      ## Uncomment if you want to use a pre-created ConfigMap rather than feeding data in via helm.
      # name:
    additionalProfileConfigMaps:
      data:
        ## if you're running spinnaker behind a reverse proxy such as a GCE ingress
        ## you may need the following profile settings for the gate profile.
        ## see https://github.com/spinnaker/spinnaker/issues/1630
        ## otherwise its harmless and will likely become default behavior in the future
        ## According to the linked github issue.
        gate-local.yml:
          server:
            tomcat:
              protocolHeader: X-Forwarded-Proto
              remoteIpHeader: X-Forwarded-For
              internalProxies: .*
              httpsServerPort: X-Forwarded-Port

    ## Define custom settings for Spinnaker services. Read more for details:
    ## https://www.spinnaker.io/reference/halyard/custom/#custom-service-settings
    ## You can use it to add annotations for pods, override the image, etc.
    additionalServiceSettings:
      gate.yml:
        healthEndpoint: /health
        kubernetes:
          useExecHealthCheck: false
      # deck.yml:
      #   artifactId: gcr.io/spinnaker-marketplace/deck:2.9.0-20190412012808
      #   kubernetes:
      #     podAnnotations:
      #       iam.amazonaws.com/role: <role_arn>
      # clouddriver.yml:
      #   kubernetes:
      #     podAnnotations:
      #       iam.amazonaws.com/role: <role_arn>

    ## Uncomment if you want to add extra commands to the init script
    ## run by the init container before halyard is started.
    ## The content will be passed through `tpl`, so value interpolation is supported.
    # additionalInitScript: |-

    ## Uncomment if you want to add annotations on halyard and install-using-hal pods
    # annotations:
    #   iam.amazonaws.com/role: <role_arn>

    ## Uncomment the following resources definitions to control the cpu and memory
    # resources allocated for the halyard pod
    resources: {}
      # requests:
      #   memory: "1Gi"
      #   cpu: "100m"
      # limits:
      #   memory: "2Gi"
      #   cpu: "200m"

    ## Uncomment if you want to set environment variables on the Halyard pod.
    # env:
    #   - name: JAVA_OPTS
    #     value: -Dhttp.proxyHost=proxy.example.com
    customCerts:
      ## Enable to override the default cacerts with your own one
      enabled: false
      secretName: custom-cacerts

  # Define which registries and repositories you want available in your
  # Spinnaker pipeline definitions
  # For more info visit:
  #   https://www.spinnaker.io/setup/providers/docker-registry/

  # Configure your Docker registries here
  dockerRegistries:
  - name: dockerhub
    address: index.docker.io
    repositories:
      - library/alpine
      - library/ubuntu
      - library/centos
      - library/nginx
  # - name: gcr
  #   address: https://gcr.io
  #   username: _json_key
  #   password: '<INSERT YOUR SERVICE ACCOUNT JSON HERE>'
  #   email: 1234@5678.com

  # If you don't want to put your passwords into a values file
  # you can use a pre-created secret instead of putting passwords
  # (specify secret name in below `dockerRegistryAccountSecret`)
  # per account above with data in the format:
  # <name>: <password>

  # dockerRegistryAccountSecret: myregistry-secrets

  kubeConfig:
    # Use this when you want to register arbitrary clusters with Spinnaker
    # Upload your ~/kube/.config to a secret
    enabled: false
    secretName: my-kubeconfig
    secretKey: config
    # List of contexts from the kubeconfig to make available to Spinnaker
    contexts:
    - default
    deploymentContext: default
    omittedNameSpaces:
    - kube-system
    - kube-public
    onlySpinnakerManaged:
      enabled: true

  # Change this if youd like to expose Spinnaker outside the cluster
  ingress:
    enabled: false
    # host: spinnaker.example.org
    # annotations:
      # ingress.kubernetes.io/ssl-redirect: 'true'
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
    # tls:
    #  - secretName: -tls
    #    hosts:
    #      - domain.com

  ingressGate:
    enabled: false
    # host: gate.spinnaker.example.org
    # annotations:
      # ingress.kubernetes.io/ssl-redirect: 'true'
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
    # tls:
    #  - secretName: -tls
    #    hosts:
    #      - domain.com

  # spinnakerFeatureFlags is a list of Spinnaker feature flags to enable
  # Ref: https://www.spinnaker.io/reference/halyard/commands/#hal-config-features-edit
  # spinnakerFeatureFlags:
  #   - artifacts
  #   - pipeline-templates
  spinnakerFeatureFlags:
    - artifacts
    - pipeline-templates
    - managed-pipeline-templates-v2-ui

  # Node labels for pod assignment
  # Ref: https://kubernetes.io/docs/user-guide/node-selection/
  # nodeSelector to provide to each of the Spinnaker components
  nodeSelector: {}

  # Redis password to use for the in-cluster redis service
  # Enable redis to use in-cluster redis
  redis:
    enabled: true
    # External Redis option will be enabled if in-cluster redis is disabled
    external:
      host: "<EXTERNAL-REDIS-HOST-NAME>"
      port: 6379
      # password: ""
    password: password
    nodeSelector: {}
    cluster:
      enabled: false
  # Uncomment if you don't want to create a PVC for redis
  #  master:
  #    persistence:
  #      enabled: false

  # Minio access/secret keys for the in-cluster S3 usage
  # Minio is not exposed publically
  minio:
    enabled: true
    imageTag: RELEASE.2019-02-13T19-48-27Z
    serviceType: ClusterIP
    accessKey: spinnakeradmin
    secretKey: spinnakeradmin
    bucket: "spinnaker"
    nodeSelector: {}
  # Uncomment if you don't want to create a PVC for minio
  #  persistence:
  #    enabled: false

  # Google Cloud Storage
  gcs:
    enabled: false
    project: my-project-name
    bucket: "<GCS-BUCKET-NAME>"
    ## if jsonKey is set, will create a secret containing it
    jsonKey: '<INSERT CLOUD STORAGE JSON HERE>'
    ## override the name of the secret to use for jsonKey, if `jsonKey`
    ## is empty, it will not create a secret assuming you are creating one
    ## external to the chart. the key for that secret should be `key.json`.
    secretName:

  # AWS Simple Storage Service
  s3:
    enabled: false
    bucket: "<S3-BUCKET-NAME>"
    # rootFolder: "front50"
    # region: "us-east-1"
    # endpoint: ""
    # accessKey: ""
    # secretKey: ""

  # Azure Storage Account
  azs:
    enabled: false
  #   storageAccountName: ""
  #   accessKey: ""
  #   containerName: "spinnaker"

  rbac:
    # Specifies whether RBAC resources should be created
    create: true

  serviceAccount:
    # Specifies whether a ServiceAccount should be created
    create: true
    # The name of the ServiceAccounts to use.
    # If left blank it is auto-generated from the fullname of the release
    halyardName:
    spinnakerName:
  securityContext:
    # Specifies permissions to write for user/group
    runAsUser: 1000
    fsGroup: 1000
